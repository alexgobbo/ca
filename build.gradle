// Set up for bintray deployment to JCenter
buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id "base"
    id "java"
    id "com.jfrog.bintray" version "1.8.5"
    id "maven-publish"
}

// Explictly describe the current build environment
println "The Gradle version being used for this build is: ${gradle.gradleVersion}."
println "The Java version being used for this gradle build is: ${JavaVersion.current()}."

// Define the coordinates for the build products.
group = 'org.epics'
archivesBaseName = 'ca'
version = '1.3.0'

ext.isReleaseVersion = ! version.endsWith( "SNAPSHOT")

// Define extra properties used to control build.
// ext.deployOSS = "X" // Don't care about the value just whether its defined or not.
// ext.deployPSI = "X" // Don't care about the value just whether its defined or not.

// Define which version of the Java compiler to use.
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

// Check that the gradle build is been performed on the expected Java platform.
if (JavaVersion.current() != project.targetCompatibility) {
    throw new GradleException( "The java version used ${JavaVersion.current()} is not the expected version ${project.targetCompatibility}.")
}

compileJava {
    // The following options can be enabled for deeper introspection into the codebase...
    options.compilerArgs << '-Xlint:unchecked'
    options.compilerArgs << '-Xlint:deprecation'
}

compileTestJava {
    // The following options can be enabled for deeper introspection into the codebase...
    options.compilerArgs << '-Xlint:unchecked'
    options.compilerArgs << '-Xlint:deprecation'
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
    }

    test {
        java {
            srcDirs 'src/test/java'
        }
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url = 'https://oss.sonatype.org/content/repositories/snapshots'
    }
}

dependencies {

    // Note in the dependencies below the javadoc versions are explicitly
    // included to assist code development when viewing the project inside
    // IDEs such as IntelliJ.

    // Supports Disruptor-based monitor notification implementation
    implementation 'com.lmax:disruptor:3.4.2'
    implementation 'com.lmax:disruptor:3.4.2:javadoc'

    // Needed for parameter validation (also the stopwatch timing class
    // that is used in testing).
    implementation 'org.apache.commons:commons-lang3:3.9'
    implementation 'org.apache.commons:commons-lang3:3.9:javadoc'

    // Support for documenting Thread-Safety
    implementation 'com.github.stephenc.jcip:jcip-annotations:1.0-1'
    implementation 'com.github.stephenc.jcip:jcip-annotations:1.0-1:javadoc'

    // Supports unit and integration tests.
    // Note the following are compile dependencies because they need to
    // be included in the fatJarWithTests jar file.
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
    testImplementation 'org.junit.platform:junit-platform-launcher:1.6.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.6.0'
    testImplementation 'org.mockito:mockito-core:3.3.3'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.6.0:javadoc'
    testImplementation 'org.junit.platform:junit-platform-launcher:1.6.2:javadoc'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.6.0:javadoc'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0:javadoc'
    testImplementation 'org.mockito:mockito-core:3.3.3:javadoc'
    testImplementation 'org.hamcrest:hamcrest:2.2:javadoc'

    // Supports JCA-based test server
    testImplementation 'org.epics:jca:2.4.4-j8'
    testImplementation 'org.epics:jca:2.4.4-j8:javadoc'
}

test {
    enabled = true
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
}

javadoc {
    // TODO: Re-evaluate situation after move to Java 11.
    // Ideally we would like to generate HTML 5 javadoc files. But currently
    // (2020-05-07) this will not  work with Java 8. Need to wait for upgrade
    // to Java 11 then try again.
    // options.addBooleanOption( 'html5', true)
    options.addStringOption( "tag", "implNote:a:Implementation Note:" )
}

task javadocJar(type: Jar) {
    archiveClassifier.set('javadoc' )
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier.set( 'sources' )
    from sourceSets.main.allSource
}

task Jar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Java EPICS CA',
                   'Implementation-Version': getArchiveVersion()
    }
    from sourceSets.main.output
}

task testJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Java EPICS CA',
                   'Implementation-Version': getArchiveVersion()
    }

    archiveClassifier.set( 'test' )
    from sourceSets.test.output
}

task fatJar(type: Jar) {
    archiveClassifier.set( 'all' )
    from {
        manifest {
            attributes 'Implementation-Title': 'Java EPICS CA',
                       'Implementation-Version': getArchiveVersion()
        }
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

task fatJarWithTests(type: Jar) {
    archiveClassifier.set( 'all-with-tests' )
    manifest {
        attributes 'Implementation-Title': 'Java EPICS CA',
                   'Implementation-Version': getArchiveVersion()
    }
    from {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    from { configurations.testRuntimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    with testJar
}

// Define what will get published
artifacts {
    archives jar, fatJar, fatJarWithTests, sourcesJar, javadocJar, testJar
}

// Set up the bintray publishing
publishing {
    publications {
        MyPublication( MavenPublication ) {
            artifact sourcesJar
            artifact javadocJar
            artifact testJar
            artifact fatJar
            artifact fatJarWithTests
            groupId group
            artifactId project.name
            version project.version
            from components.java
        }
    }
}

// Define the Jfrog Bintray build.
bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    publications = ['MyPublication']
    pkg {
        repo = 'hltools'
        name = 'channelaccess-ca'
        userOrg = 'paulscherrerinstitute'
        vcsUrl = 'https://github.com/channelaccess/ca'
        licenses = ['GPL-3.0']
        version {
            name = project.version
        }
    }
}
