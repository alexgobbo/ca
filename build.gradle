apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.4'
    }
}

apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'


group = 'org.epics'
archivesBaseName = 'ca'
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

version = '1.2.2'

ext.isReleaseVersion = ! version.endsWith("SNAPSHOT")

ext.deployOSS = 'false'
ext.deployPSI = 'true'

compileJava {
    // The following options can be enabled for deeper introspection into the codebase...
    //options.compilerArgs << '-Xlint:unchecked'
    //options.compilerArgs << '-Xlint:deprecation'
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Java EPICS CA',
                   'Implementation-Version': version
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
    }

    test {
        java {
            srcDir 'src/test/java'
        }
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url = 'https://oss.sonatype.org/content/repositories/snapshots'
    }
}

dependencies {
    // Supports Disruptor-based monitor notification implementation
    compile 'com.lmax:disruptor:3.4.2'
    compile 'com.lmax:disruptor:3.4.2:javadoc'

    // Needed for parameter validation (also the stopwatch timing class
    // that is used in testing).
    compile 'org.apache.commons:commons-lang3:3.7'
    compile 'org.apache.commons:commons-lang3:3.7:javadoc'

    // Supports for documenting Thread-Safety
    compile 'com.github.stephenc.jcip:jcip-annotations:1.0-1'

    // Supports unit and integration tests
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.2.0'
    testCompile('org.junit.jupiter:junit-jupiter-api:5.2.0:javadoc')
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.2.0'
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.2.0:javadoc')
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.2.0'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.2.0:javadoc'
    testCompile 'org.mockito:mockito-core:2.18.3'
    testCompile 'org.mockito:mockito-core:2.18.3:javadoc'

    // Supports CAJ-based test server
    testCompile 'org.epics:caj:1.1.16-SNAPSHOT'
    testCompile 'org.epics:caj:1.1.16-SNAPSHOT:javadoc'
    testCompile 'org.epics:jca:2.3.6'
    testCompile 'org.epics:jca:2.3.6:javadoc'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
}

javadoc {
   // options.addBooleanOption('html5', true)
    options.addStringOption( "tag", "implNote:a:Implementation Note:" )
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task fatJar(type: Jar) {
    classifier = 'all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

artifacts {
    archives jar, fatJar, sourcesJar, javadocJar
}

signing {
    required = { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            if ( project.hasProperty( "deployOSS") ) {

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
            }

            if ( project.hasProperty( "deployPSI") ) {

                repository(url: "https://artifacts.psi.ch/artifactory/libs-releases-local") {
                    authentication(userName: mavenUser, password: mavenPassword)
                }

                snapshotRepository(url: "https://artifacts.psi.ch/artifactory/libs-snapshots-local") {
                    authentication(userName: mavenUser, password: mavenPassword)
                }
            }

            pom.project {
                name = 'Example Application'
                packaging = 'jar'
                // optionally artifactId can be defined here
                description = 'Java CA client implementation using a new API (not using JCA).'
                url = 'https://github.com/channelaccess/ca'
                licenses {
                    license {
                        name = 'GNU General Public License 3.0'
                        url = 'http://www.gnu.org/licenses/gpl.txt'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        name = 'Simon Rees'
                        email = 'simon.rees@psi.ch'
                        organization = 'Paul Scherrer Institute'
                    }
                }

                scm {
                    connection = 'scm:git:https://github.com/channelaccess/ca.git'
                    developerConnection = 'scm:git:https://github.com/channelaccess/ca.git'
                    url = 'https://github.com/channelaccess/ca'
                }
            }
        }
    }
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            groupId group
            artifactId project.name
            version version
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    publications = ['MyPublication']
    pkg {
        repo = 'hltools'
        name = 'channelaccess-ca'
        userOrg = 'paulscherrerinstitute'
        version {
            name = version
        }
    }
}




