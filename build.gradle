apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'

group = 'org.epics'
archivesBaseName = 'ca'
sourceCompatibility = 10
version = '1.1.0-SNAPSHOT'

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

jar {
    manifest {
        attributes 'Implementation-Title': 'Java EPICS CA',
                'Implementation-Version': version
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
    }

    test {
        java {
            srcDir 'src/test/java'
            exclude '**/proto/*'
        }
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url = 'https://oss.sonatype.org/content/repositories/snapshots'
    }
}

dependencies {
    // Supports Disruptor-based monitor notification implementation
    compile 'com.lmax:disruptor:3.4.2'
    compile 'com.lmax:disruptor:3.4.2:javadoc'

    // Needed for parameter validation (als0 the stopwatch timing class
    // that is used in testing).
    compile 'org.apache.commons:commons-lang3:3.7'

    // Support for improved logging
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'org.slf4j:slf4j-jdk14:1.7.25'

    // Supports for documenting Thread-Safety
    compile 'com.github.stephenc.jcip:jcip-annotations:1.0-1'

    // Supports unit and integration tests
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.2.0'
    testCompile('org.junit.jupiter:junit-jupiter-api:5.2.0:javadoc')
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.2.0'
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.2.0:javadoc')
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.2.0'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.2.0:javadoc'
    testCompile 'org.mockito:mockito-core:2.18.3'
    testCompile 'org.mockito:mockito-core:2.18.3:javadoc'

    // Supports CAJ-based test server
    testCompile 'org.epics:caj:1.1.16-SNAPSHOT'
    testCompile 'org.epics:caj:1.1.16-SNAPSHOT:javadoc'
    testCompile 'org.epics:jca:2.3.6'
    testCompile 'org.epics:jca:2.3.6:javadoc'

}

test {
    useJUnitPlatform()
}

javadoc {
    options.addBooleanOption('html5', true)
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
//    archives javadocJar, sourcesJar
    archives jar, sourcesJar, javadocJar
}

signing {
    required = { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'Example Application'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'Java CA client implementation using a new API (not using JCA).'
                url = 'https://github.com/channelaccess/ca'
                licenses {
                    license {
                        name 'GNU General Public License 3.0'
                        url ='http://www.gnu.org/licenses/gpl.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        name 'Simon Ebner'
                        email 'daq@psi.ch'
                        organization 'Paul Scherrer Institute'
                    }
                }

                scm {
                    connection 'scm:git:https://github.com/channelaccess/ca.git'
                    developerConnection 'scm:git:https://github.com/channelaccess/ca.git'
                    url 'https://github.com/channelaccess/ca'
                }
            }
        }
    }
}

task fatJar(type: Jar) {
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
